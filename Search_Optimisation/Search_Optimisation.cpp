#define _CRT_SECURE_NO_WARNINGS     // для корректной работы scanf в Visual Studio последних версий
#include <stdio.h>
#include <stdlib.h>                 // для переключения на русский язык - функция system()
#include <time.h>
#include "Header.h"


int main() {
    int linearStepSearch = 0;
    system("chcp 1251"); // переходим на страницу 1251 для поддержки русского языка
    system("cls");       // очищаем окно консоли

    int k[10000];    // описываем массив из 1000000 элементов
    srand(time(NULL));// Установить начальную точку генерирования последовательности использовать функцию time(NULL)
                    
    


    for (int i = 0; i < 1000000; i++)
    {
        k[i] = rand();

        printf(" %d элемент массива: %d\n", i, k[i]);

    }


    /* ************Линейный поиск***********/
    int number;
    printf(" Введите   искомое число :");
    scanf("%d", &number);
   
      int point;    
                 // индекс элемента, равного указанному значению (number)
                // Вызываем функцию поиска в массиве элемента, равного numer
      point = linearSearch(k, 100000, number);

    if (point == -1) {// если функция вернула -1, такого элемента в массиве нет
        printf(" Числа %d в массиве нет!\n", number);
    }
    else // иначе выводим полученный индекс элемента
        printf("Искомомое число:%d имеет индекс %d \n", number, point);
   /*
    linearStepSearch = point;
         
     printf("количество шагов алгоритма последовательного поиска : %d\n", linearStepSearch);
     */




     /*************Транспозиция**************/
        int pointTR;

     pointTR = Transposition(k, 100000, number);
     if (pointTR == -1) {// если функция вернула -1, такого элемента в массиве нет
         printf("Элементов равных %d в массиве нет!\n", number);
     }
     else // иначе выводим полученный индекс элемента
         printf("Элемент с индексом %d равен %d\n", pointTR, number);
       /*      linearStepSearch = point;

             printf("количество шагов алгоритма последовательного поиска : %d\n", linearStepSearch);  */
     printf("Текущий номер элемента после транспозиции: %d\n", pointTR - 1);
                
     
            

                 /***************Поиск после транспозиции*********************/
                 
                
                 // Вызываем функцию поиска в массиве, равного number
                     int pointAfterTR;
                     pointAfterTR = linearSearch(k, 100000, number);
                       
                        if (pointAfterTR == -1)
                        {
                            // если функция вернула -1, такого элемента в массиве нет
                             printf("Элементов равных %d в массиве нет!\n", number);
                        }
                         else // иначе выводим полученный индекс элемента
                             printf("При повторном поиске после транспозиции элемент с индексом %d равен %d\n", pointAfterTR, number);


                        /****************Перемещение****************/
                        
                        
                        // Вызываем функцию перемещения в начало
                        int pointMTS;
                        pointMTS = MoveToStart(k, 100000, number);


                        if (pointMTS == -1) {// если функция вернула -1, такого элемента в массиве нет
                            printf("Элементов равных %d в массиве нет!\n", number);
                        }
                        else // иначе выводим полученный индекс элемента
                            printf(" После переещения в начало элемент с индексом %d равен %d\n", pointMTS, number);


                        /***************Поиск после перемещеия в начало*********************/


                     // Вызываем функцию поиска в массиве, равного number
                         int pointAfterMTS;
                         pointAfterMTS = linearSearch(k, 100000, number);

                                if (pointAfterMTS == -1)
                                {
                                    // если функция вернула -1, такого элемента в массиве нет
                                    printf("Элементов равных %d в массиве нет!\n", number);
                                }
                                else // иначе выводим полученный индекс элемента
                                    printf("При повторном поиске после перемещения в начало элемент с индексом %d равен %d\n", pointAfterMTS, number);





     

     getchar(); getchar();
}